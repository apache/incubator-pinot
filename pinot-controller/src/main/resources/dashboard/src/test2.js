const test =  {"OFFLINE":{"tableName":"baseballStats_OFFLINE","tableType":"OFFLINE","segmentsConfig":{"schemaName":"baseball","replication":"1","segmentPushType":"APPEND","retentionTimeUnit":null,"retentionTimeValue":null,"segmentPushFrequency":null,"replicasPerPartition":null,"timeColumnName":null,"timeType":null,"segmentAssignmentStrategy":"BalanceNumSegmentAssignmentStrategy","replicaGroupStrategyConfig":null,"completionConfig":null},"tenants":{"broker":"DefaultTenant","server":"DefaultTenant","tagOverrideConfig":null},"tableIndexConfig":{"streamConfigs":{},"segmentPartitionConfig":null,"segmentFormatVersion":null,"nullHandlingEnabled":false,"invertedIndexColumns":["playerID","teamID"],"autoGeneratedInvertedIndex":false,"createInvertedIndexDuringSegmentGeneration":false,"sortedColumn":[],"bloomFilterColumns":[],"loadMode":"HEAP","columnMinMaxValueGeneratorMode":null,"noDictionaryColumns":null,"noDictionaryConfig":null,"onHeapDictionaryColumns":null,"starTreeIndexConfigs":null,"aggregateMetrics":false,"varLengthDictionaryColumns":null},"metadata":{"customConfigs":{}}}}

function test1() {
    for(const prop in test) {
        const value = test[prop];
        console.log(value);
        console.log(typeof  value === "object");
    }
}

function populateNode(data, i, name) {
    const node = {};
    node.id = i;
    node.name = name;
    node.children =  [];
    for (const prop in data) {
        const value = data[prop];
        if(typeof value === 'object') {
            node.children.push(JSON.stringify(populateNode(value,++i, prop)));
        } else {
            const child = {id: ++i, name: prop + ':'  +  value};
            node.children.push(child);
        }
    }
    return node;
}


function testing() {
    let value = null;
    console.log(value? value='test':value = 'ee');
}

testing();