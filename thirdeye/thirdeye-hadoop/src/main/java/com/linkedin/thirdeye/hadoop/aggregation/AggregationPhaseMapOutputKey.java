/**
 * Copyright (C) 2014-2015 LinkedIn Corp. (pinot-core@linkedin.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.linkedin.thirdeye.hadoop.aggregation;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.linkedin.thirdeye.hadoop.config.DimensionType;

/**
 * Wrapper for the key generated by mapper in Aggregation
 */
public class AggregationPhaseMapOutputKey {

  private long time;
  private List<Object> dimensions;
  private List<DimensionType> dimensionTypes;

  public AggregationPhaseMapOutputKey(long time, List<Object> dimensions, List<DimensionType> dimensionTypes) {
    this.time = time;
    this.dimensions = dimensions;
    this.dimensionTypes = dimensionTypes;
  }

  public long getTime() {
    return time;
  }

  public List<Object> getDimensions() {
    return dimensions;
  }

  public List<DimensionType> getDimensionTypes() {
    return dimensionTypes;
  }

  public byte[] toBytes() throws IOException {

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(baos);
    byte[] bytes;

    // time
    dos.writeLong(time);

    // dimensions size
    dos.writeInt(dimensions.size());
    // dimension values
    for (int i = 0; i < dimensions.size(); i++) {
      Object dimension = dimensions.get(i);
      DimensionType dimensionType = dimensionTypes.get(i);

      switch (dimensionType) {
      case DOUBLE:
        dos.writeDouble((double) dimension) ;
        break;
      case FLOAT:
        dos.writeFloat((float) dimension);
        break;
      case INT:
        dos.writeInt((int) dimension);
        break;
      case SHORT:
        dos.writeShort((short) dimension);
        break;
      case LONG:
        dos.writeLong((long) dimension);
        break;
      case STRING:
        String val = (String) dimension;
        bytes = val.getBytes();
        dos.writeInt(bytes.length);
        dos.write(bytes);
        break;
      }
    }

    baos.close();
    dos.close();
    return baos.toByteArray();
  }

  public static AggregationPhaseMapOutputKey fromBytes(byte[] buffer, List<DimensionType> dimensionTypes) throws IOException {
    DataInputStream dis = new DataInputStream(new ByteArrayInputStream(buffer));
    int length;
    int size;
    List<Object> dimensions = new ArrayList<>();
    byte[] bytes;

    // time
    long time = dis.readLong();

    // dimensions size
    size = dis.readInt();

    // dimension value
    for (int i = 0; i < size; i++) {
      DimensionType dimensionType = dimensionTypes.get(i);
      switch (dimensionType) {
      case DOUBLE:
        dimensions.add(dis.readDouble());
        break;
      case FLOAT:
        dimensions.add(dis.readFloat());
        break;
      case INT:
        dimensions.add(dis.readInt());
        break;
      case SHORT:
        dimensions.add(dis.readShort());
        break;
      case LONG:
        dimensions.add(dis.readLong());
        break;
      case STRING:
        length = dis.readInt();
        bytes = new byte[length];
        dis.read(bytes);
        dimensions.add(new String(bytes));
        break;
      }
    }

    AggregationPhaseMapOutputKey wrapper;
    wrapper = new AggregationPhaseMapOutputKey(time, dimensions, dimensionTypes);
    return wrapper;
  }

}
