/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.pinot.core.segment.processing.genericrow;

import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.nio.ByteOrder;
import java.util.List;
import org.apache.pinot.segment.spi.memory.PinotDataBuffer;
import org.apache.pinot.spi.data.FieldSpec;
import org.apache.pinot.spi.data.readers.GenericRow;


/**
 * File reader for {@link GenericRow}. The input files should be generated by the {@link GenericRowFileWriter}.
 */
public class GenericRowFileReader implements Closeable {
  private final int _numRows;
  private final PinotDataBuffer _offsetBuffer;
  private final PinotDataBuffer _dataBuffer;
  private final GenericRowDeserializer _deserializer;

  public GenericRowFileReader(File offsetFile, File dataFile, List<FieldSpec> fieldSpecs, boolean includeNullFields)
      throws IOException {
    long offsetFileLength = offsetFile.length();
    _numRows = (int) (offsetFileLength >>> 3); // offsetFileLength / Long.BYTES
    _offsetBuffer = PinotDataBuffer
        .mapFile(offsetFile, true, 0L, offsetFileLength, ByteOrder.BIG_ENDIAN, "GenericRow offset buffer");
    _dataBuffer = PinotDataBuffer
        .mapFile(dataFile, true, 0L, dataFile.length(), PinotDataBuffer.NATIVE_ORDER, "GenericRow data buffer");
    _deserializer = new GenericRowDeserializer(_dataBuffer, fieldSpecs, includeNullFields);
  }

  /**
   * Returns the number of rows within the files.
   */
  public int getNumRows() {
    return _numRows;
  }

  /**
   * Reads the data of the given row id into the given reusable row.
   */
  public GenericRow read(int rowId, GenericRow reuse) {
    long offset = _offsetBuffer.getLong((long) rowId << 3); // rowId * Long.BYTES
    return _deserializer.deserialize(offset, reuse);
  }

  /**
   * Reads the first several fields of the given row id.
   */
  public Object[] partialRead(int rowId, int numFields) {
    long offset = _offsetBuffer.getLong((long) rowId << 3);
    return _deserializer.partialDeserialize(offset, numFields);
  }

  @Override
  public void close()
      throws IOException {
    _offsetBuffer.close();
    _dataBuffer.close();
  }
}
