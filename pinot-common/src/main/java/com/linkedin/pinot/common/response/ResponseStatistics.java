/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linkedin.pinot.common.response;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Response Statistics
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-9-1")
public class ResponseStatistics implements org.apache.thrift.TBase<ResponseStatistics, ResponseStatistics._Fields>, java.io.Serializable, Cloneable, Comparable<ResponseStatistics> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResponseStatistics");

  private static final org.apache.thrift.protocol.TField SEGMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("segmentId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_DOCS_SCANNED_FIELD_DESC = new org.apache.thrift.protocol.TField("numDocsScanned", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_USED_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeUsedMs", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResponseStatisticsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResponseStatisticsTupleSchemeFactory());
  }

  private String segmentId; // optional
  private int numDocsScanned; // optional
  private long timeUsedMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEGMENT_ID((short)1, "segmentId"),
    NUM_DOCS_SCANNED((short)2, "numDocsScanned"),
    TIME_USED_MS((short)3, "timeUsedMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEGMENT_ID
          return SEGMENT_ID;
        case 2: // NUM_DOCS_SCANNED
          return NUM_DOCS_SCANNED;
        case 3: // TIME_USED_MS
          return TIME_USED_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMDOCSSCANNED_ISSET_ID = 0;
  private static final int __TIMEUSEDMS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SEGMENT_ID,_Fields.NUM_DOCS_SCANNED,_Fields.TIME_USED_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEGMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("segmentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_DOCS_SCANNED, new org.apache.thrift.meta_data.FieldMetaData("numDocsScanned", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_USED_MS, new org.apache.thrift.meta_data.FieldMetaData("timeUsedMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResponseStatistics.class, metaDataMap);
  }

  public ResponseStatistics() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResponseStatistics(ResponseStatistics other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSegmentId()) {
      this.segmentId = other.segmentId;
    }
    this.numDocsScanned = other.numDocsScanned;
    this.timeUsedMs = other.timeUsedMs;
  }

  public ResponseStatistics deepCopy() {
    return new ResponseStatistics(this);
  }

  @Override
  public void clear() {
    this.segmentId = null;
    setNumDocsScannedIsSet(false);
    this.numDocsScanned = 0;
    setTimeUsedMsIsSet(false);
    this.timeUsedMs = 0;
  }

  public String getSegmentId() {
    return this.segmentId;
  }

  public void setSegmentId(String segmentId) {
    this.segmentId = segmentId;
  }

  public void unsetSegmentId() {
    this.segmentId = null;
  }

  /** Returns true if field segmentId is set (has been assigned a value) and false otherwise */
  public boolean isSetSegmentId() {
    return this.segmentId != null;
  }

  public void setSegmentIdIsSet(boolean value) {
    if (!value) {
      this.segmentId = null;
    }
  }

  public int getNumDocsScanned() {
    return this.numDocsScanned;
  }

  public void setNumDocsScanned(int numDocsScanned) {
    this.numDocsScanned = numDocsScanned;
    setNumDocsScannedIsSet(true);
  }

  public void unsetNumDocsScanned() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMDOCSSCANNED_ISSET_ID);
  }

  /** Returns true if field numDocsScanned is set (has been assigned a value) and false otherwise */
  public boolean isSetNumDocsScanned() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMDOCSSCANNED_ISSET_ID);
  }

  public void setNumDocsScannedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMDOCSSCANNED_ISSET_ID, value);
  }

  public long getTimeUsedMs() {
    return this.timeUsedMs;
  }

  public void setTimeUsedMs(long timeUsedMs) {
    this.timeUsedMs = timeUsedMs;
    setTimeUsedMsIsSet(true);
  }

  public void unsetTimeUsedMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEUSEDMS_ISSET_ID);
  }

  /** Returns true if field timeUsedMs is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeUsedMs() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEUSEDMS_ISSET_ID);
  }

  public void setTimeUsedMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEUSEDMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEGMENT_ID:
      if (value == null) {
        unsetSegmentId();
      } else {
        setSegmentId((String)value);
      }
      break;

    case NUM_DOCS_SCANNED:
      if (value == null) {
        unsetNumDocsScanned();
      } else {
        setNumDocsScanned((Integer)value);
      }
      break;

    case TIME_USED_MS:
      if (value == null) {
        unsetTimeUsedMs();
      } else {
        setTimeUsedMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEGMENT_ID:
      return getSegmentId();

    case NUM_DOCS_SCANNED:
      return Integer.valueOf(getNumDocsScanned());

    case TIME_USED_MS:
      return Long.valueOf(getTimeUsedMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEGMENT_ID:
      return isSetSegmentId();
    case NUM_DOCS_SCANNED:
      return isSetNumDocsScanned();
    case TIME_USED_MS:
      return isSetTimeUsedMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResponseStatistics)
      return this.equals((ResponseStatistics)that);
    return false;
  }

  public boolean equals(ResponseStatistics that) {
    if (that == null)
      return false;

    boolean this_present_segmentId = true && this.isSetSegmentId();
    boolean that_present_segmentId = true && that.isSetSegmentId();
    if (this_present_segmentId || that_present_segmentId) {
      if (!(this_present_segmentId && that_present_segmentId))
        return false;
      if (!this.segmentId.equals(that.segmentId))
        return false;
    }

    boolean this_present_numDocsScanned = true && this.isSetNumDocsScanned();
    boolean that_present_numDocsScanned = true && that.isSetNumDocsScanned();
    if (this_present_numDocsScanned || that_present_numDocsScanned) {
      if (!(this_present_numDocsScanned && that_present_numDocsScanned))
        return false;
      if (this.numDocsScanned != that.numDocsScanned)
        return false;
    }

    boolean this_present_timeUsedMs = true && this.isSetTimeUsedMs();
    boolean that_present_timeUsedMs = true && that.isSetTimeUsedMs();
    if (this_present_timeUsedMs || that_present_timeUsedMs) {
      if (!(this_present_timeUsedMs && that_present_timeUsedMs))
        return false;
      if (this.timeUsedMs != that.timeUsedMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_segmentId = true && (isSetSegmentId());
    list.add(present_segmentId);
    if (present_segmentId)
      list.add(segmentId);

    boolean present_numDocsScanned = true && (isSetNumDocsScanned());
    list.add(present_numDocsScanned);
    if (present_numDocsScanned)
      list.add(numDocsScanned);

    boolean present_timeUsedMs = true && (isSetTimeUsedMs());
    list.add(present_timeUsedMs);
    if (present_timeUsedMs)
      list.add(timeUsedMs);

    return list.hashCode();
  }

  @Override
  public int compareTo(ResponseStatistics other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSegmentId()).compareTo(other.isSetSegmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSegmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segmentId, other.segmentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumDocsScanned()).compareTo(other.isSetNumDocsScanned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumDocsScanned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numDocsScanned, other.numDocsScanned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeUsedMs()).compareTo(other.isSetTimeUsedMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeUsedMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeUsedMs, other.timeUsedMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResponseStatistics(");
    boolean first = true;

    if (isSetSegmentId()) {
      sb.append("segmentId:");
      if (this.segmentId == null) {
        sb.append("null");
      } else {
        sb.append(this.segmentId);
      }
      first = false;
    }
    if (isSetNumDocsScanned()) {
      if (!first) sb.append(", ");
      sb.append("numDocsScanned:");
      sb.append(this.numDocsScanned);
      first = false;
    }
    if (isSetTimeUsedMs()) {
      if (!first) sb.append(", ");
      sb.append("timeUsedMs:");
      sb.append(this.timeUsedMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResponseStatisticsStandardSchemeFactory implements SchemeFactory {
    public ResponseStatisticsStandardScheme getScheme() {
      return new ResponseStatisticsStandardScheme();
    }
  }

  private static class ResponseStatisticsStandardScheme extends StandardScheme<ResponseStatistics> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResponseStatistics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEGMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.segmentId = iprot.readString();
              struct.setSegmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_DOCS_SCANNED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numDocsScanned = iprot.readI32();
              struct.setNumDocsScannedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME_USED_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeUsedMs = iprot.readI64();
              struct.setTimeUsedMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResponseStatistics struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.segmentId != null) {
        if (struct.isSetSegmentId()) {
          oprot.writeFieldBegin(SEGMENT_ID_FIELD_DESC);
          oprot.writeString(struct.segmentId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNumDocsScanned()) {
        oprot.writeFieldBegin(NUM_DOCS_SCANNED_FIELD_DESC);
        oprot.writeI32(struct.numDocsScanned);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeUsedMs()) {
        oprot.writeFieldBegin(TIME_USED_MS_FIELD_DESC);
        oprot.writeI64(struct.timeUsedMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResponseStatisticsTupleSchemeFactory implements SchemeFactory {
    public ResponseStatisticsTupleScheme getScheme() {
      return new ResponseStatisticsTupleScheme();
    }
  }

  private static class ResponseStatisticsTupleScheme extends TupleScheme<ResponseStatistics> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResponseStatistics struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSegmentId()) {
        optionals.set(0);
      }
      if (struct.isSetNumDocsScanned()) {
        optionals.set(1);
      }
      if (struct.isSetTimeUsedMs()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSegmentId()) {
        oprot.writeString(struct.segmentId);
      }
      if (struct.isSetNumDocsScanned()) {
        oprot.writeI32(struct.numDocsScanned);
      }
      if (struct.isSetTimeUsedMs()) {
        oprot.writeI64(struct.timeUsedMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResponseStatistics struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.segmentId = iprot.readString();
        struct.setSegmentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.numDocsScanned = iprot.readI32();
        struct.setNumDocsScannedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timeUsedMs = iprot.readI64();
        struct.setTimeUsedMsIsSet(true);
      }
    }
  }

}

