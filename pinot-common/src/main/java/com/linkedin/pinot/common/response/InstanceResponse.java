/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linkedin.pinot.common.response;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * InstanceResponse
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-9-1")
public class InstanceResponse implements org.apache.thrift.TBase<InstanceResponse, InstanceResponse._Fields>, java.io.Serializable, Cloneable, Comparable<InstanceResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InstanceResponse");

  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_DOCS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalDocs", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_DOCS_SCANNED_FIELD_DESC = new org.apache.thrift.protocol.TField("numDocsScanned", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_USED_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeUsedMs", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField AGGREGATION_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregationResults", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField ROW_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("rowEvents", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField SEGMENT_STATISTICS_FIELD_DESC = new org.apache.thrift.protocol.TField("segmentStatistics", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField EXCEPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptions", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField TRACE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("traceInfo", org.apache.thrift.protocol.TType.MAP, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InstanceResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InstanceResponseTupleSchemeFactory());
  }

  private long requestId; // required
  private long totalDocs; // optional
  private long numDocsScanned; // optional
  private long timeUsedMs; // optional
  private List<AggregationResult> aggregationResults; // optional
  private List<RowEvent> rowEvents; // optional
  private List<ResponseStatistics> segmentStatistics; // optional
  private List<ProcessingException> exceptions; // optional
  private Map<String,String> traceInfo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUEST_ID((short)1, "requestId"),
    TOTAL_DOCS((short)2, "totalDocs"),
    NUM_DOCS_SCANNED((short)3, "numDocsScanned"),
    TIME_USED_MS((short)4, "timeUsedMs"),
    AGGREGATION_RESULTS((short)5, "aggregationResults"),
    ROW_EVENTS((short)6, "rowEvents"),
    SEGMENT_STATISTICS((short)7, "segmentStatistics"),
    EXCEPTIONS((short)8, "exceptions"),
    TRACE_INFO((short)9, "traceInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST_ID
          return REQUEST_ID;
        case 2: // TOTAL_DOCS
          return TOTAL_DOCS;
        case 3: // NUM_DOCS_SCANNED
          return NUM_DOCS_SCANNED;
        case 4: // TIME_USED_MS
          return TIME_USED_MS;
        case 5: // AGGREGATION_RESULTS
          return AGGREGATION_RESULTS;
        case 6: // ROW_EVENTS
          return ROW_EVENTS;
        case 7: // SEGMENT_STATISTICS
          return SEGMENT_STATISTICS;
        case 8: // EXCEPTIONS
          return EXCEPTIONS;
        case 9: // TRACE_INFO
          return TRACE_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REQUESTID_ISSET_ID = 0;
  private static final int __TOTALDOCS_ISSET_ID = 1;
  private static final int __NUMDOCSSCANNED_ISSET_ID = 2;
  private static final int __TIMEUSEDMS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TOTAL_DOCS,_Fields.NUM_DOCS_SCANNED,_Fields.TIME_USED_MS,_Fields.AGGREGATION_RESULTS,_Fields.ROW_EVENTS,_Fields.SEGMENT_STATISTICS,_Fields.EXCEPTIONS,_Fields.TRACE_INFO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_DOCS, new org.apache.thrift.meta_data.FieldMetaData("totalDocs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_DOCS_SCANNED, new org.apache.thrift.meta_data.FieldMetaData("numDocsScanned", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIME_USED_MS, new org.apache.thrift.meta_data.FieldMetaData("timeUsedMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AGGREGATION_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("aggregationResults", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AggregationResult.class))));
    tmpMap.put(_Fields.ROW_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("rowEvents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RowEvent.class))));
    tmpMap.put(_Fields.SEGMENT_STATISTICS, new org.apache.thrift.meta_data.FieldMetaData("segmentStatistics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseStatistics.class))));
    tmpMap.put(_Fields.EXCEPTIONS, new org.apache.thrift.meta_data.FieldMetaData("exceptions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT))));
    tmpMap.put(_Fields.TRACE_INFO, new org.apache.thrift.meta_data.FieldMetaData("traceInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InstanceResponse.class, metaDataMap);
  }

  public InstanceResponse() {
  }

  public InstanceResponse(
    long requestId)
  {
    this();
    this.requestId = requestId;
    setRequestIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InstanceResponse(InstanceResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.requestId = other.requestId;
    this.totalDocs = other.totalDocs;
    this.numDocsScanned = other.numDocsScanned;
    this.timeUsedMs = other.timeUsedMs;
    if (other.isSetAggregationResults()) {
      List<AggregationResult> __this__aggregationResults = new ArrayList<AggregationResult>(other.aggregationResults.size());
      for (AggregationResult other_element : other.aggregationResults) {
        __this__aggregationResults.add(new AggregationResult(other_element));
      }
      this.aggregationResults = __this__aggregationResults;
    }
    if (other.isSetRowEvents()) {
      List<RowEvent> __this__rowEvents = new ArrayList<RowEvent>(other.rowEvents.size());
      for (RowEvent other_element : other.rowEvents) {
        __this__rowEvents.add(new RowEvent(other_element));
      }
      this.rowEvents = __this__rowEvents;
    }
    if (other.isSetSegmentStatistics()) {
      List<ResponseStatistics> __this__segmentStatistics = new ArrayList<ResponseStatistics>(other.segmentStatistics.size());
      for (ResponseStatistics other_element : other.segmentStatistics) {
        __this__segmentStatistics.add(new ResponseStatistics(other_element));
      }
      this.segmentStatistics = __this__segmentStatistics;
    }
    if (other.isSetExceptions()) {
      List<ProcessingException> __this__exceptions = new ArrayList<ProcessingException>(other.exceptions.size());
      for (ProcessingException other_element : other.exceptions) {
        __this__exceptions.add(new ProcessingException(other_element));
      }
      this.exceptions = __this__exceptions;
    }
    if (other.isSetTraceInfo()) {
      Map<String,String> __this__traceInfo = new HashMap<String,String>(other.traceInfo);
      this.traceInfo = __this__traceInfo;
    }
  }

  public InstanceResponse deepCopy() {
    return new InstanceResponse(this);
  }

  @Override
  public void clear() {
    setRequestIdIsSet(false);
    this.requestId = 0;
    setTotalDocsIsSet(false);
    this.totalDocs = 0;
    setNumDocsScannedIsSet(false);
    this.numDocsScanned = 0;
    setTimeUsedMsIsSet(false);
    this.timeUsedMs = 0;
    this.aggregationResults = null;
    this.rowEvents = null;
    this.segmentStatistics = null;
    this.exceptions = null;
    this.traceInfo = null;
  }

  public long getRequestId() {
    return this.requestId;
  }

  public void setRequestId(long requestId) {
    this.requestId = requestId;
    setRequestIdIsSet(true);
  }

  public void unsetRequestId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestId() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  public void setRequestIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
  }

  public long getTotalDocs() {
    return this.totalDocs;
  }

  public void setTotalDocs(long totalDocs) {
    this.totalDocs = totalDocs;
    setTotalDocsIsSet(true);
  }

  public void unsetTotalDocs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALDOCS_ISSET_ID);
  }

  /** Returns true if field totalDocs is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalDocs() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALDOCS_ISSET_ID);
  }

  public void setTotalDocsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALDOCS_ISSET_ID, value);
  }

  public long getNumDocsScanned() {
    return this.numDocsScanned;
  }

  public void setNumDocsScanned(long numDocsScanned) {
    this.numDocsScanned = numDocsScanned;
    setNumDocsScannedIsSet(true);
  }

  public void unsetNumDocsScanned() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMDOCSSCANNED_ISSET_ID);
  }

  /** Returns true if field numDocsScanned is set (has been assigned a value) and false otherwise */
  public boolean isSetNumDocsScanned() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMDOCSSCANNED_ISSET_ID);
  }

  public void setNumDocsScannedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMDOCSSCANNED_ISSET_ID, value);
  }

  public long getTimeUsedMs() {
    return this.timeUsedMs;
  }

  public void setTimeUsedMs(long timeUsedMs) {
    this.timeUsedMs = timeUsedMs;
    setTimeUsedMsIsSet(true);
  }

  public void unsetTimeUsedMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEUSEDMS_ISSET_ID);
  }

  /** Returns true if field timeUsedMs is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeUsedMs() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEUSEDMS_ISSET_ID);
  }

  public void setTimeUsedMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEUSEDMS_ISSET_ID, value);
  }

  public int getAggregationResultsSize() {
    return (this.aggregationResults == null) ? 0 : this.aggregationResults.size();
  }

  public java.util.Iterator<AggregationResult> getAggregationResultsIterator() {
    return (this.aggregationResults == null) ? null : this.aggregationResults.iterator();
  }

  public void addToAggregationResults(AggregationResult elem) {
    if (this.aggregationResults == null) {
      this.aggregationResults = new ArrayList<AggregationResult>();
    }
    this.aggregationResults.add(elem);
  }

  public List<AggregationResult> getAggregationResults() {
    return this.aggregationResults;
  }

  public void setAggregationResults(List<AggregationResult> aggregationResults) {
    this.aggregationResults = aggregationResults;
  }

  public void unsetAggregationResults() {
    this.aggregationResults = null;
  }

  /** Returns true if field aggregationResults is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregationResults() {
    return this.aggregationResults != null;
  }

  public void setAggregationResultsIsSet(boolean value) {
    if (!value) {
      this.aggregationResults = null;
    }
  }

  public int getRowEventsSize() {
    return (this.rowEvents == null) ? 0 : this.rowEvents.size();
  }

  public java.util.Iterator<RowEvent> getRowEventsIterator() {
    return (this.rowEvents == null) ? null : this.rowEvents.iterator();
  }

  public void addToRowEvents(RowEvent elem) {
    if (this.rowEvents == null) {
      this.rowEvents = new ArrayList<RowEvent>();
    }
    this.rowEvents.add(elem);
  }

  public List<RowEvent> getRowEvents() {
    return this.rowEvents;
  }

  public void setRowEvents(List<RowEvent> rowEvents) {
    this.rowEvents = rowEvents;
  }

  public void unsetRowEvents() {
    this.rowEvents = null;
  }

  /** Returns true if field rowEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetRowEvents() {
    return this.rowEvents != null;
  }

  public void setRowEventsIsSet(boolean value) {
    if (!value) {
      this.rowEvents = null;
    }
  }

  public int getSegmentStatisticsSize() {
    return (this.segmentStatistics == null) ? 0 : this.segmentStatistics.size();
  }

  public java.util.Iterator<ResponseStatistics> getSegmentStatisticsIterator() {
    return (this.segmentStatistics == null) ? null : this.segmentStatistics.iterator();
  }

  public void addToSegmentStatistics(ResponseStatistics elem) {
    if (this.segmentStatistics == null) {
      this.segmentStatistics = new ArrayList<ResponseStatistics>();
    }
    this.segmentStatistics.add(elem);
  }

  public List<ResponseStatistics> getSegmentStatistics() {
    return this.segmentStatistics;
  }

  public void setSegmentStatistics(List<ResponseStatistics> segmentStatistics) {
    this.segmentStatistics = segmentStatistics;
  }

  public void unsetSegmentStatistics() {
    this.segmentStatistics = null;
  }

  /** Returns true if field segmentStatistics is set (has been assigned a value) and false otherwise */
  public boolean isSetSegmentStatistics() {
    return this.segmentStatistics != null;
  }

  public void setSegmentStatisticsIsSet(boolean value) {
    if (!value) {
      this.segmentStatistics = null;
    }
  }

  public int getExceptionsSize() {
    return (this.exceptions == null) ? 0 : this.exceptions.size();
  }

  public java.util.Iterator<ProcessingException> getExceptionsIterator() {
    return (this.exceptions == null) ? null : this.exceptions.iterator();
  }

  public void addToExceptions(ProcessingException elem) {
    if (this.exceptions == null) {
      this.exceptions = new ArrayList<ProcessingException>();
    }
    this.exceptions.add(elem);
  }

  public List<ProcessingException> getExceptions() {
    return this.exceptions;
  }

  public void setExceptions(List<ProcessingException> exceptions) {
    this.exceptions = exceptions;
  }

  public void unsetExceptions() {
    this.exceptions = null;
  }

  /** Returns true if field exceptions is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptions() {
    return this.exceptions != null;
  }

  public void setExceptionsIsSet(boolean value) {
    if (!value) {
      this.exceptions = null;
    }
  }

  public int getTraceInfoSize() {
    return (this.traceInfo == null) ? 0 : this.traceInfo.size();
  }

  public void putToTraceInfo(String key, String val) {
    if (this.traceInfo == null) {
      this.traceInfo = new HashMap<String,String>();
    }
    this.traceInfo.put(key, val);
  }

  public Map<String,String> getTraceInfo() {
    return this.traceInfo;
  }

  public void setTraceInfo(Map<String,String> traceInfo) {
    this.traceInfo = traceInfo;
  }

  public void unsetTraceInfo() {
    this.traceInfo = null;
  }

  /** Returns true if field traceInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceInfo() {
    return this.traceInfo != null;
  }

  public void setTraceInfoIsSet(boolean value) {
    if (!value) {
      this.traceInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUEST_ID:
      if (value == null) {
        unsetRequestId();
      } else {
        setRequestId((Long)value);
      }
      break;

    case TOTAL_DOCS:
      if (value == null) {
        unsetTotalDocs();
      } else {
        setTotalDocs((Long)value);
      }
      break;

    case NUM_DOCS_SCANNED:
      if (value == null) {
        unsetNumDocsScanned();
      } else {
        setNumDocsScanned((Long)value);
      }
      break;

    case TIME_USED_MS:
      if (value == null) {
        unsetTimeUsedMs();
      } else {
        setTimeUsedMs((Long)value);
      }
      break;

    case AGGREGATION_RESULTS:
      if (value == null) {
        unsetAggregationResults();
      } else {
        setAggregationResults((List<AggregationResult>)value);
      }
      break;

    case ROW_EVENTS:
      if (value == null) {
        unsetRowEvents();
      } else {
        setRowEvents((List<RowEvent>)value);
      }
      break;

    case SEGMENT_STATISTICS:
      if (value == null) {
        unsetSegmentStatistics();
      } else {
        setSegmentStatistics((List<ResponseStatistics>)value);
      }
      break;

    case EXCEPTIONS:
      if (value == null) {
        unsetExceptions();
      } else {
        setExceptions((List<ProcessingException>)value);
      }
      break;

    case TRACE_INFO:
      if (value == null) {
        unsetTraceInfo();
      } else {
        setTraceInfo((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST_ID:
      return Long.valueOf(getRequestId());

    case TOTAL_DOCS:
      return Long.valueOf(getTotalDocs());

    case NUM_DOCS_SCANNED:
      return Long.valueOf(getNumDocsScanned());

    case TIME_USED_MS:
      return Long.valueOf(getTimeUsedMs());

    case AGGREGATION_RESULTS:
      return getAggregationResults();

    case ROW_EVENTS:
      return getRowEvents();

    case SEGMENT_STATISTICS:
      return getSegmentStatistics();

    case EXCEPTIONS:
      return getExceptions();

    case TRACE_INFO:
      return getTraceInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUEST_ID:
      return isSetRequestId();
    case TOTAL_DOCS:
      return isSetTotalDocs();
    case NUM_DOCS_SCANNED:
      return isSetNumDocsScanned();
    case TIME_USED_MS:
      return isSetTimeUsedMs();
    case AGGREGATION_RESULTS:
      return isSetAggregationResults();
    case ROW_EVENTS:
      return isSetRowEvents();
    case SEGMENT_STATISTICS:
      return isSetSegmentStatistics();
    case EXCEPTIONS:
      return isSetExceptions();
    case TRACE_INFO:
      return isSetTraceInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InstanceResponse)
      return this.equals((InstanceResponse)that);
    return false;
  }

  public boolean equals(InstanceResponse that) {
    if (that == null)
      return false;

    boolean this_present_requestId = true;
    boolean that_present_requestId = true;
    if (this_present_requestId || that_present_requestId) {
      if (!(this_present_requestId && that_present_requestId))
        return false;
      if (this.requestId != that.requestId)
        return false;
    }

    boolean this_present_totalDocs = true && this.isSetTotalDocs();
    boolean that_present_totalDocs = true && that.isSetTotalDocs();
    if (this_present_totalDocs || that_present_totalDocs) {
      if (!(this_present_totalDocs && that_present_totalDocs))
        return false;
      if (this.totalDocs != that.totalDocs)
        return false;
    }

    boolean this_present_numDocsScanned = true && this.isSetNumDocsScanned();
    boolean that_present_numDocsScanned = true && that.isSetNumDocsScanned();
    if (this_present_numDocsScanned || that_present_numDocsScanned) {
      if (!(this_present_numDocsScanned && that_present_numDocsScanned))
        return false;
      if (this.numDocsScanned != that.numDocsScanned)
        return false;
    }

    boolean this_present_timeUsedMs = true && this.isSetTimeUsedMs();
    boolean that_present_timeUsedMs = true && that.isSetTimeUsedMs();
    if (this_present_timeUsedMs || that_present_timeUsedMs) {
      if (!(this_present_timeUsedMs && that_present_timeUsedMs))
        return false;
      if (this.timeUsedMs != that.timeUsedMs)
        return false;
    }

    boolean this_present_aggregationResults = true && this.isSetAggregationResults();
    boolean that_present_aggregationResults = true && that.isSetAggregationResults();
    if (this_present_aggregationResults || that_present_aggregationResults) {
      if (!(this_present_aggregationResults && that_present_aggregationResults))
        return false;
      if (!this.aggregationResults.equals(that.aggregationResults))
        return false;
    }

    boolean this_present_rowEvents = true && this.isSetRowEvents();
    boolean that_present_rowEvents = true && that.isSetRowEvents();
    if (this_present_rowEvents || that_present_rowEvents) {
      if (!(this_present_rowEvents && that_present_rowEvents))
        return false;
      if (!this.rowEvents.equals(that.rowEvents))
        return false;
    }

    boolean this_present_segmentStatistics = true && this.isSetSegmentStatistics();
    boolean that_present_segmentStatistics = true && that.isSetSegmentStatistics();
    if (this_present_segmentStatistics || that_present_segmentStatistics) {
      if (!(this_present_segmentStatistics && that_present_segmentStatistics))
        return false;
      if (!this.segmentStatistics.equals(that.segmentStatistics))
        return false;
    }

    boolean this_present_exceptions = true && this.isSetExceptions();
    boolean that_present_exceptions = true && that.isSetExceptions();
    if (this_present_exceptions || that_present_exceptions) {
      if (!(this_present_exceptions && that_present_exceptions))
        return false;
      if (!this.exceptions.equals(that.exceptions))
        return false;
    }

    boolean this_present_traceInfo = true && this.isSetTraceInfo();
    boolean that_present_traceInfo = true && that.isSetTraceInfo();
    if (this_present_traceInfo || that_present_traceInfo) {
      if (!(this_present_traceInfo && that_present_traceInfo))
        return false;
      if (!this.traceInfo.equals(that.traceInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_requestId = true;
    list.add(present_requestId);
    if (present_requestId)
      list.add(requestId);

    boolean present_totalDocs = true && (isSetTotalDocs());
    list.add(present_totalDocs);
    if (present_totalDocs)
      list.add(totalDocs);

    boolean present_numDocsScanned = true && (isSetNumDocsScanned());
    list.add(present_numDocsScanned);
    if (present_numDocsScanned)
      list.add(numDocsScanned);

    boolean present_timeUsedMs = true && (isSetTimeUsedMs());
    list.add(present_timeUsedMs);
    if (present_timeUsedMs)
      list.add(timeUsedMs);

    boolean present_aggregationResults = true && (isSetAggregationResults());
    list.add(present_aggregationResults);
    if (present_aggregationResults)
      list.add(aggregationResults);

    boolean present_rowEvents = true && (isSetRowEvents());
    list.add(present_rowEvents);
    if (present_rowEvents)
      list.add(rowEvents);

    boolean present_segmentStatistics = true && (isSetSegmentStatistics());
    list.add(present_segmentStatistics);
    if (present_segmentStatistics)
      list.add(segmentStatistics);

    boolean present_exceptions = true && (isSetExceptions());
    list.add(present_exceptions);
    if (present_exceptions)
      list.add(exceptions);

    boolean present_traceInfo = true && (isSetTraceInfo());
    list.add(present_traceInfo);
    if (present_traceInfo)
      list.add(traceInfo);

    return list.hashCode();
  }

  @Override
  public int compareTo(InstanceResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalDocs()).compareTo(other.isSetTotalDocs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalDocs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalDocs, other.totalDocs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumDocsScanned()).compareTo(other.isSetNumDocsScanned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumDocsScanned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numDocsScanned, other.numDocsScanned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeUsedMs()).compareTo(other.isSetTimeUsedMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeUsedMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeUsedMs, other.timeUsedMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggregationResults()).compareTo(other.isSetAggregationResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregationResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregationResults, other.aggregationResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRowEvents()).compareTo(other.isSetRowEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowEvents, other.rowEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSegmentStatistics()).compareTo(other.isSetSegmentStatistics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSegmentStatistics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segmentStatistics, other.segmentStatistics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExceptions()).compareTo(other.isSetExceptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptions, other.exceptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceInfo()).compareTo(other.isSetTraceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceInfo, other.traceInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InstanceResponse(");
    boolean first = true;

    sb.append("requestId:");
    sb.append(this.requestId);
    first = false;
    if (isSetTotalDocs()) {
      if (!first) sb.append(", ");
      sb.append("totalDocs:");
      sb.append(this.totalDocs);
      first = false;
    }
    if (isSetNumDocsScanned()) {
      if (!first) sb.append(", ");
      sb.append("numDocsScanned:");
      sb.append(this.numDocsScanned);
      first = false;
    }
    if (isSetTimeUsedMs()) {
      if (!first) sb.append(", ");
      sb.append("timeUsedMs:");
      sb.append(this.timeUsedMs);
      first = false;
    }
    if (isSetAggregationResults()) {
      if (!first) sb.append(", ");
      sb.append("aggregationResults:");
      if (this.aggregationResults == null) {
        sb.append("null");
      } else {
        sb.append(this.aggregationResults);
      }
      first = false;
    }
    if (isSetRowEvents()) {
      if (!first) sb.append(", ");
      sb.append("rowEvents:");
      if (this.rowEvents == null) {
        sb.append("null");
      } else {
        sb.append(this.rowEvents);
      }
      first = false;
    }
    if (isSetSegmentStatistics()) {
      if (!first) sb.append(", ");
      sb.append("segmentStatistics:");
      if (this.segmentStatistics == null) {
        sb.append("null");
      } else {
        sb.append(this.segmentStatistics);
      }
      first = false;
    }
    if (isSetExceptions()) {
      if (!first) sb.append(", ");
      sb.append("exceptions:");
      if (this.exceptions == null) {
        sb.append("null");
      } else {
        sb.append(this.exceptions);
      }
      first = false;
    }
    if (isSetTraceInfo()) {
      if (!first) sb.append(", ");
      sb.append("traceInfo:");
      if (this.traceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.traceInfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetRequestId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'requestId' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InstanceResponseStandardSchemeFactory implements SchemeFactory {
    public InstanceResponseStandardScheme getScheme() {
      return new InstanceResponseStandardScheme();
    }
  }

  private static class InstanceResponseStandardScheme extends StandardScheme<InstanceResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InstanceResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.requestId = iprot.readI64();
              struct.setRequestIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_DOCS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalDocs = iprot.readI64();
              struct.setTotalDocsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_DOCS_SCANNED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numDocsScanned = iprot.readI64();
              struct.setNumDocsScannedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME_USED_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeUsedMs = iprot.readI64();
              struct.setTimeUsedMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AGGREGATION_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list166 = iprot.readListBegin();
                struct.aggregationResults = new ArrayList<AggregationResult>(_list166.size);
                AggregationResult _elem167;
                for (int _i168 = 0; _i168 < _list166.size; ++_i168)
                {
                  _elem167 = new AggregationResult();
                  _elem167.read(iprot);
                  struct.aggregationResults.add(_elem167);
                }
                iprot.readListEnd();
              }
              struct.setAggregationResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ROW_EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list169 = iprot.readListBegin();
                struct.rowEvents = new ArrayList<RowEvent>(_list169.size);
                RowEvent _elem170;
                for (int _i171 = 0; _i171 < _list169.size; ++_i171)
                {
                  _elem170 = new RowEvent();
                  _elem170.read(iprot);
                  struct.rowEvents.add(_elem170);
                }
                iprot.readListEnd();
              }
              struct.setRowEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SEGMENT_STATISTICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
                struct.segmentStatistics = new ArrayList<ResponseStatistics>(_list172.size);
                ResponseStatistics _elem173;
                for (int _i174 = 0; _i174 < _list172.size; ++_i174)
                {
                  _elem173 = new ResponseStatistics();
                  _elem173.read(iprot);
                  struct.segmentStatistics.add(_elem173);
                }
                iprot.readListEnd();
              }
              struct.setSegmentStatisticsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXCEPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list175 = iprot.readListBegin();
                struct.exceptions = new ArrayList<ProcessingException>(_list175.size);
                ProcessingException _elem176;
                for (int _i177 = 0; _i177 < _list175.size; ++_i177)
                {
                  _elem176 = new ProcessingException();
                  _elem176.read(iprot);
                  struct.exceptions.add(_elem176);
                }
                iprot.readListEnd();
              }
              struct.setExceptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRACE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map178 = iprot.readMapBegin();
                struct.traceInfo = new HashMap<String,String>(2*_map178.size);
                String _key179;
                String _val180;
                for (int _i181 = 0; _i181 < _map178.size; ++_i181)
                {
                  _key179 = iprot.readString();
                  _val180 = iprot.readString();
                  struct.traceInfo.put(_key179, _val180);
                }
                iprot.readMapEnd();
              }
              struct.setTraceInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InstanceResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
      oprot.writeI64(struct.requestId);
      oprot.writeFieldEnd();
      if (struct.isSetTotalDocs()) {
        oprot.writeFieldBegin(TOTAL_DOCS_FIELD_DESC);
        oprot.writeI64(struct.totalDocs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNumDocsScanned()) {
        oprot.writeFieldBegin(NUM_DOCS_SCANNED_FIELD_DESC);
        oprot.writeI64(struct.numDocsScanned);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeUsedMs()) {
        oprot.writeFieldBegin(TIME_USED_MS_FIELD_DESC);
        oprot.writeI64(struct.timeUsedMs);
        oprot.writeFieldEnd();
      }
      if (struct.aggregationResults != null) {
        if (struct.isSetAggregationResults()) {
          oprot.writeFieldBegin(AGGREGATION_RESULTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.aggregationResults.size()));
            for (AggregationResult _iter182 : struct.aggregationResults)
            {
              _iter182.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.rowEvents != null) {
        if (struct.isSetRowEvents()) {
          oprot.writeFieldBegin(ROW_EVENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rowEvents.size()));
            for (RowEvent _iter183 : struct.rowEvents)
            {
              _iter183.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.segmentStatistics != null) {
        if (struct.isSetSegmentStatistics()) {
          oprot.writeFieldBegin(SEGMENT_STATISTICS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.segmentStatistics.size()));
            for (ResponseStatistics _iter184 : struct.segmentStatistics)
            {
              _iter184.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.exceptions != null) {
        if (struct.isSetExceptions()) {
          oprot.writeFieldBegin(EXCEPTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.exceptions.size()));
            for (ProcessingException _iter185 : struct.exceptions)
            {
              _iter185.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.traceInfo != null) {
        if (struct.isSetTraceInfo()) {
          oprot.writeFieldBegin(TRACE_INFO_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.traceInfo.size()));
            for (Map.Entry<String, String> _iter186 : struct.traceInfo.entrySet())
            {
              oprot.writeString(_iter186.getKey());
              oprot.writeString(_iter186.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InstanceResponseTupleSchemeFactory implements SchemeFactory {
    public InstanceResponseTupleScheme getScheme() {
      return new InstanceResponseTupleScheme();
    }
  }

  private static class InstanceResponseTupleScheme extends TupleScheme<InstanceResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InstanceResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.requestId);
      BitSet optionals = new BitSet();
      if (struct.isSetTotalDocs()) {
        optionals.set(0);
      }
      if (struct.isSetNumDocsScanned()) {
        optionals.set(1);
      }
      if (struct.isSetTimeUsedMs()) {
        optionals.set(2);
      }
      if (struct.isSetAggregationResults()) {
        optionals.set(3);
      }
      if (struct.isSetRowEvents()) {
        optionals.set(4);
      }
      if (struct.isSetSegmentStatistics()) {
        optionals.set(5);
      }
      if (struct.isSetExceptions()) {
        optionals.set(6);
      }
      if (struct.isSetTraceInfo()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetTotalDocs()) {
        oprot.writeI64(struct.totalDocs);
      }
      if (struct.isSetNumDocsScanned()) {
        oprot.writeI64(struct.numDocsScanned);
      }
      if (struct.isSetTimeUsedMs()) {
        oprot.writeI64(struct.timeUsedMs);
      }
      if (struct.isSetAggregationResults()) {
        {
          oprot.writeI32(struct.aggregationResults.size());
          for (AggregationResult _iter187 : struct.aggregationResults)
          {
            _iter187.write(oprot);
          }
        }
      }
      if (struct.isSetRowEvents()) {
        {
          oprot.writeI32(struct.rowEvents.size());
          for (RowEvent _iter188 : struct.rowEvents)
          {
            _iter188.write(oprot);
          }
        }
      }
      if (struct.isSetSegmentStatistics()) {
        {
          oprot.writeI32(struct.segmentStatistics.size());
          for (ResponseStatistics _iter189 : struct.segmentStatistics)
          {
            _iter189.write(oprot);
          }
        }
      }
      if (struct.isSetExceptions()) {
        {
          oprot.writeI32(struct.exceptions.size());
          for (ProcessingException _iter190 : struct.exceptions)
          {
            _iter190.write(oprot);
          }
        }
      }
      if (struct.isSetTraceInfo()) {
        {
          oprot.writeI32(struct.traceInfo.size());
          for (Map.Entry<String, String> _iter191 : struct.traceInfo.entrySet())
          {
            oprot.writeString(_iter191.getKey());
            oprot.writeString(_iter191.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InstanceResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.requestId = iprot.readI64();
      struct.setRequestIdIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.totalDocs = iprot.readI64();
        struct.setTotalDocsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.numDocsScanned = iprot.readI64();
        struct.setNumDocsScannedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timeUsedMs = iprot.readI64();
        struct.setTimeUsedMsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list192 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.aggregationResults = new ArrayList<AggregationResult>(_list192.size);
          AggregationResult _elem193;
          for (int _i194 = 0; _i194 < _list192.size; ++_i194)
          {
            _elem193 = new AggregationResult();
            _elem193.read(iprot);
            struct.aggregationResults.add(_elem193);
          }
        }
        struct.setAggregationResultsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list195 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.rowEvents = new ArrayList<RowEvent>(_list195.size);
          RowEvent _elem196;
          for (int _i197 = 0; _i197 < _list195.size; ++_i197)
          {
            _elem196 = new RowEvent();
            _elem196.read(iprot);
            struct.rowEvents.add(_elem196);
          }
        }
        struct.setRowEventsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list198 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.segmentStatistics = new ArrayList<ResponseStatistics>(_list198.size);
          ResponseStatistics _elem199;
          for (int _i200 = 0; _i200 < _list198.size; ++_i200)
          {
            _elem199 = new ResponseStatistics();
            _elem199.read(iprot);
            struct.segmentStatistics.add(_elem199);
          }
        }
        struct.setSegmentStatisticsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list201 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.exceptions = new ArrayList<ProcessingException>(_list201.size);
          ProcessingException _elem202;
          for (int _i203 = 0; _i203 < _list201.size; ++_i203)
          {
            _elem202 = new ProcessingException();
            _elem202.read(iprot);
            struct.exceptions.add(_elem202);
          }
        }
        struct.setExceptionsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map204 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.traceInfo = new HashMap<String,String>(2*_map204.size);
          String _key205;
          String _val206;
          for (int _i207 = 0; _i207 < _map204.size; ++_i207)
          {
            _key205 = iprot.readString();
            _val206 = iprot.readString();
            struct.traceInfo.put(_key205, _val206);
          }
        }
        struct.setTraceInfoIsSet(true);
      }
    }
  }

}

